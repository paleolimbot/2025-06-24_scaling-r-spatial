---
title: "Scaling the r-spatial ecosystem"
subtitle: "...for the modern composable data pipeline"
author: "Dewey Dunnington (@paleolimbot)"
institute: ""
format:
  revealjs:
    embed-resources: true
    title-slide-attributes:
      data-background-image: bg/wb0.png
      data-background-color: "#2556BB"
---

```{r setup, include = FALSE}
library(tidyverse)
library(sf)
```

## Me {background-image="bg/wb4.png"}

::: {style="text-align: center;"}

![](logo/arrow-hex.png){width="20%"} ![](logo/nanoarrow-hex.png){width="20%"} ![](logo/geoarrow_logo.png){width="20%"} ![](logo/sf.gif){width="20%"}

:::

::: {style="text-align: center;"}

![](logo/sedona_logo.png){width="70%"}

:::

::: {style="text-align: center;"}

![](logo/wherobots.png){width="50%"}

:::

## Me in #rstats {background-image="bg/wb3.png"}

Maintainer of s2, wk, geos, geoarrow, nanoarrow, tidypaleo, ggspatial, adbc(drivermanager|sqlite|postgresql)

Contributor to qgisprocess, arrow, ggplot2

## Places to find/ask/share {background-image="bg/wb3.png"}

I'm now a low-level nuts-and-bolts developer a few years removed from day-to-day usage. If you have questions, feedback, or expertise to share there are some great venues!

- [geocomp*x*](https://geocompx.org/) (on Discord and elsewhere)
- [paleolimbot/2025-06-24_scaling-r-spatial](https://github.com/paleolimbot/2025-06-24_scaling-r-spatial)
- `@paleolimbot` on Discord/BlueSky/Fosstodon/GitHub

## Concepts: Make your data smaller (sooner) {background-image="bg/wb3.png"}

Often data is distributed in bulk but only a small portion is needed for an analysis. Most readers will let you provide a bounding box or SQL query to limit the data that has to be dealt with in memory.

## Concepts: Spatial is not special {background-image="bg/wb4.png"}

For every person there is trying to optimize spatial there's 50 people optimizing non-spatial. Using non-spatial tools/formats (e.g., Arrow and Parquet) can be much faster!

![](bg/geometry-first.png)

## Concepts: Spatial is not special {background-image="bg/wb3.png"}

For every person there is trying to optimize spatial there's 50 people optimizing non-spatial. Using non-spatial tools/formats (e.g., Arrow and Parquet) can be much faster!

![](bg/geometry-equal.png)

## Concepts: Spatial is sort of special {background-image="bg/wb3.png"}

...but also tools that special-case geometry (e.g., sf) can help you avoid mistakes and provide more compact syntax for common operations. Don't optimize too early!

## Concepts: Look for the spatial join  {background-image="bg/wb3.png"}

When your analysis must consider the interaction between every feature in one layer and every feature in another layer, your analysis can probably be phrased as a spatial join. Look for it!

## {background="#2556BB"}

<br/>

<br/>

::: {style="text-align: center;"}

### sf for big(ger) data

<br/>

### Beyond sf (terra, s2, geos, wk, and more)

<br/>

### Driving spatial databases from R

:::

## sf for big(ger) data: filter-on-read {background-image="bg/wb3.png"}

Say you have a data source and an area you're interested in:

```{r}
#| echo: true
bounds_lonlat <- st_bbox(
  c(xmin = -64.6418, xmax = -64.2868, ymin = 44.8473, ymax = 45.0151),
  crs = st_crs("OGC:CRS84")
)
```

```{r}
#| include: false
elevation_crs <- st_layers("data/ns-water_elevation.fgb")$crs[[1]]

# Transform the bounds to the CRS of the source
bounds_poly <- bounds_lonlat |>
  st_transform(elevation_crs) |>
  st_as_sfc()
```

## sf for big(ger) data: filter-on-read {background-image="bg/wb3.png"}

```{r}
#| echo: true
#| eval: false
system.time({
  # Read the file
  elevation <- read_sf("data/ns-water_elevation.fgb")

  # Transform the bounds to the CRS of the source
  bounds_poly <- bounds_lonlat |>
    st_transform(st_crs(elevation)) |>
    st_as_sfc()

  # Filter to area of interest
  elevation <- elevation |>
    filter(st_intersects(elevation, bounds_poly[[1]], sparse = FALSE))
})
#>    user  system elapsed
#>  67.656   5.454  74.056
```

## sf for big(ger) data: filter-on-read {background-image="bg/wb3.png"}

```{r}
#| echo: true
#| eval: false
system.time({
  # Read the CRS of the source
  elevation_crs <- st_layers("data/ns-water_elevation.fgb")$crs[[1]]

  # Transform the bounds to the CRS of the source
  bounds_poly <- bounds_lonlat |>
    st_transform(elevation_crs) |>
    st_as_sfc()

  # Read just the data you need
  elevation <- st_read(
    "data/ns-water_elevation.fgb",
    wkt_filter = st_as_text(bounds_poly)
  )
})
#>    user  system elapsed
#>   7.146   0.478   7.641
```

## sf for big(ger) data: `st_join()` {background-image="bg/wb3.png"}

Let's look at the interaction of the elevation points with some lakes.

```{r}
#| echo: true
lakes <- read_sf("data/ns-water_water-poly.fgb")
lakes <- lakes |>
  filter(st_intersects(lakes, bounds_poly[[1]], sparse = FALSE)) |>
  st_transform(elevation_crs)
```

## sf for big(ger) data: `st_join()` {background-image="bg/wb3.png"}

If we wanted to find the mean elevation of each lake, we might do something like this:

```{r}
#| echo: true
#| eval: false
system.time({
  lakes$mean_elev <- lakes$geometry |>
    map_dbl(~{
      elev_is_relevant <- st_intersects(elevation, .x, sparse = FALSE)
      mean(elevation$ZVALUE[elev_is_relevant])
    })
})
#>    user  system elapsed
#> 220.054   3.715 223.819
```

## sf for big(ger) data: `st_join()` {background-image="bg/wb3.png"}

What we want here is a join!

```{r}
#| echo: true
#| eval: false
system.time({
  lakes |>
    mutate(row_id = row_number()) |>
    st_join(elevation, join = st_intersects) |>
    group_by(row_id) |>
    summarise(mean_elev = mean(ZVALUE.y))
})
#>    user  system elapsed
#>  10.418   0.582  11.004
```

## Beyond sf: terra {background-image="bg/wb3.png"}

Terra implements reads with extents:

```{r}
#| echo: true
#| eval: false
library(terra)

system.time({
  elevation <- vect("data/ns-water_elevation.fgb", proxy = TRUE)
  extent <- project(vect(bounds_lonlat |> st_as_sfc()), crs(elevation))
  elevation <- vect("data/ns-water_elevation.fgb", extent = extent)
})
#>    user  system elapsed
#>   5.925   0.477   6.407
```

...but not spatial joins (primarily targeted at raster). The API is also not based on the `data.frame` and converting from terra to a data frame can be expensive.

## Beyond sf: wk {background-image="bg/wb3.png"}

```{r}
#| echo: true
library(vapour)
library(geos)

system.time({
  elevation <- vapour_read_geometry("data/ns-water_elevation.fgb") |>
    geos_read_wkb(crs = st_crs(lakes))
})
#>    user  system elapsed
#>   6.633   1.162   8.539
```

## Beyond sf: wk {background-image="bg/wb3.png"}

```{r strtreejoin}
#| echo: true
system.time({
  index <- geos_strtree(elevation)
  lakes$geometry |>
    as_geos_geometry() |>
    map_dbl(~{
      elevation_candidates <- elevation[geos_strtree_query(index, .x)[[1]]]
      elevations <- elevation_candidates[geos_prepared_intersects(elevation_candidates, .x)]
      mean(geos_z(elevations))
    })
})
#>    user  system elapsed
#>   2.521   0.021   2.542
```

## Driving spatial databases {background-image="bg/wb3.png"}

All the tools we've seen so far provide a way to do the computation directly using R packages.

Many databases provide spatial functionality but add some complications:

- How do you get data into the database?
- How do you get data out of the database?
- How do you phrase the operation you're hoping for in SQL?

## Driving spatial databases: DuckDB {background-image="bg/wb3.png"}

```{r duckdb1}
#| echo: true
library(duckdb)
library(geoarrow)

con <- dbConnect(duckdb::duckdb())
dbExecute(con, "LOAD spatial")
dbExecute(con, "CALL register_geoarrow_extensions()")
```

## Driving spatial databases: DuckDB {background-image="bg/wb3.png"}

```{r duckdb2}
#| echo: true
#| output: hide
bounds_poly |> st_as_text()
dbExecute(
  con,
  glue::glue("
   CREATE TABLE IF NOT EXISTS lakes AS
   SELECT * FROM 'data/ns-water_water-poly.fgb'
   WHERE ST_Intersects(geom, ST_GeomFromText('{bounds_poly |> st_as_text()}'))
  ")
)
dbExecute(con, "CREATE TABLE IF NOT EXISTS elevation AS SELECT * FROM 'data/ns-water_elevation.fgb'")
```

## Driving spatial databases: DuckDB {background-image="bg/wb3.png"}

```{r duckdb3}
#| echo: true
#| output: hide
dbGetQuery(con, "
  SELECT objectid, AVG(ST_Z(elevation.geom)) FROM lakes
  LEFT JOIN elevation ON ST_Intersects(lakes.geom, elevation.geom)
  GROUP BY objectid
")
```

## Driving spatial databases: PostGIS {background-image="bg/wb3.png"}

```{r adbc0}
#| echo: true
library(adbcdrivermanager)

con <- adbc_database_init(
  adbcpostgresql::adbcpostgresql(),
  uri = "postgres://localhost:5432?user=postgres&password=password"
) |>
  adbc_connection_init()
```

```{r}
#| include: false
con |> execute_adbc("DROP TABLE IF EXISTS lakes")
con |> execute_adbc("DROP TABLE IF EXISTS elevation")
```

## Driving spatial databases: PostGIS {background-image="bg/wb3.png"}

```{r adbc1}
#| echo: true
con |>
  execute_adbc("CREATE TABLE lakes (objectid float8, geometry GEOMETRY)")
lakes |>
  as_tibble() |>
  transmute(objectid = OBJECTID, geometry = wk::as_wkb(geometry)) |>
  write_adbc(con, "lakes", mode = "append")
```

## Driving spatial databases: PostGIS {background-image="bg/wb3.png"}

```{r adbc2}
#| echo: true
con |>
  execute_adbc("CREATE TABLE elevation (geometry GEOMETRY)")
tibble(geometry = elevation |> wk::as_wkb()) |>
  write_adbc(con, "elevation", mode = "append")
```

## Driving spatial databases: PostGIS {background-image="bg/wb3.png"}

```{r adbc3}
con |>
  execute_adbc("CREATE INDEX elevation_idx ON elevation USING gist(geometry)")
```

```{r adbc4}
con |>
  read_adbc("
    SELECT objectid, AVG(ST_Z(elevation.geometry)) FROM lakes
    LEFT JOIN elevation ON ST_Intersects(lakes.geometry, elevation.geometry)
    GROUP BY objectid
  ") |>
  as_tibble()
```

## Driving spatial databases: Apache Sedona {background-image="bg/wb3.png"}


## Technologies: GeoArrow {background-image="bg/wb3.png"}

## Technologies: GeoParquet {background-image="bg/wb3.png"}


## Scaling r-spatial {background-image="bg/wb3.png"}

- [dewey.dunnington.ca/slides/rspatial2025](https://dewey.dunnington.ca/slides/rspatial2025)
- {{< fa brands github >}} [paleolimbot/duckdb-geography](https://github.com/paleolimbot/2025-06-24_scaling-r-spatial)

## Acknowledgements {background-image="bg/wb3.png"}

- Edzer Pebezma (sf)
- Michael Sumner (hypertidy, vapour)
- Josiah, Terri, Jesse @ R Consortium
- Hadley Wickham

## Getting the data {background-image="bg/wb3.png"}

```{r}
#| echo: true
#| eval: false
curl::curl_download(
  "https://github.com/geoarrow/geoarrow-data/releases/download/v0.2.0/ns-water_elevation.fgb",
  "data/ns-water_elevation.fgb"
)

curl::curl_download(
  "https://github.com/geoarrow/geoarrow-data/releases/download/v0.2.0/ns-water_water-poly.fgb",
  "data/ns-water_water-poly.fgb"
)
```

